name: examples

on:
  workflow_dispatch:
    inputs:
      description:
        description: "Description for this run"
        required: false
        type: string

env:
  binary: hello-bevy #Â CHANGE: This needs to match the project name in Cargo.toml
  optimize: false    # CHANGE: This produces a smaller and faster web build, but it takes a long time

jobs:
  build-wasm:
    strategy:
      matrix:
        include:
          - name: dvd 
            features: "release"
          - name: jump
            features: "release"
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install nix
        uses: nixbuild/nix-quick-install-action@v28

      - name: Use nix flake
        uses: nicknovitski/nix-develop@v1
        with:
          arguments: ".#web"

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          shared-key: "examples"

      - name: Build
        run: |
          cargo build --release --example ${{ matrix.name }} --no-default-features --features ${{ matrix.features }} --target wasm32-unknown-unknown

      - name: Prepare package
        run: |
          wasm-bindgen --no-typescript --out-name ${{ env.binary }} --out-dir wasm --target web target/wasm32-unknown-unknown/release/examples/${{ matrix.name }}.wasm
          sed -i "s/hello-bevy/${{ env.binary }}/g" wasm/index.html

      - name: Optimize Wasm
        if: ${{ env.optimize == 'true' }}
        working-directory: ./wasm
        run: |
          mv ${{ env.binary }}_bg.wasm base.wasm
          wasm-opt base.wasm -o ${{ env.binary }}_bg.wasm -Os

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: wasm/*
          name: ${{ matrix.name }}
